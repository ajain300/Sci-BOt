# Code functions to run the active learning cycle from the front end. Uses the active learning part of the repo.

from sci_llm.active_learning.al_loop import Active_Learning_Loop
from sci_llm.active_learning.dataset import AL_Dataset
from sci_llm.active_learning.targets import TARGET_TYPES_DICT
import pandas as pd
import numpy as np
import os
from typing import Dict


def run_active_learning(input_data : pd.DataFrame, config_dict : Dict) -> pd.DataFrame:
    """
    Executes the active learning cycle on the provided input data using the specified dictionary configuration.
    Args:
        input_data (pd.DataFrame): The input data to be processed.
        config_dict (Dict): A dictionary containing configuration parameters for the active learning cycle.

    Returns:
        pd.DataFrame: The recommendations generated by the active learning loop.
    """

    for feature in config_dict['features']:
        if 'columns' not in feature.keys():
            feature['columns'] = feature['name']

    # Fix any formatting
    config_dict = modify_configuration(config_dict)
    input_data = modify_input_data(input_data, config_dict)
    
    dataset = AL_Dataset(config_dict)
    dataset.set_dataset(input_data)

    df = dataset.process_data()
  
    al_loop = Active_Learning_Loop(dataset)
    recs = al_loop.run_Loop()
    return recs

def modify_configuration(config):
    """
    Convert the variable type names to types within the active learning module
    """
    for feature in config['features']:
        if feature['type'] == 'composition':
            feature['type'] = 'composition'
            parts = feature['columns']
            ranges = feature['range']
            feature['columns'] = {"parts": parts, "range": ranges}
        elif feature['type'] == 'continuous':
            feature['type'] = 'general'
        elif feature['type'] == 'discrete':
            feature['type'] = 'discrete'
        else:
            raise ValueError(f"Invalid feature type: {feature['type']}")    
    
    for target in config['targets']:
        if target['type']['value'] not in list(TARGET_TYPES_DICT.keys()):
            raise ValueError(f"Invalid target type: {target['target_type']}")
    
        target['scaling'] = 'lin'
            
    return config

def modify_input_data(input_data : pd.DataFrame, config_dict : Dict) -> pd.DataFrame:
    """
    Modifies the input data to be in the correct format for the active learning module.
    """
    # Convert all columns to float if they can be converted
    for col in input_data.columns:
        try:
            input_data[col] = input_data[col].astype(float)
        except ValueError:
            pass

    for target in config_dict['targets']:
        if f"{target['name']}_std" not in input_data.columns:
            print(np.array(input_data.loc[:, target['name']]))
            # Add the standard deviation column if it doesn't exist, with a default value according to the magnitude of the data
            input_data[f"{target['name']}_std"] = 0.001 * np.mean(abs(np.array(input_data.loc[:, target['name']])))
            
    return input_data